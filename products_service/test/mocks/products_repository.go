// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	models "github.com/manoamaro/microservices-store/products_service/internal/models"
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// ProductsRepository is an autogenerated mock type for the ProductsRepository type
type ProductsRepository struct {
	mock.Mock
}

// AddImage provides a mock function with given fields: id, imagePath
func (_m *ProductsRepository) AddImage(id primitive.ObjectID, imagePath string) (bool, error) {
	ret := _m.Called(id, imagePath)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) (bool, error)); ok {
		return rf(id, imagePath)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) bool); ok {
		r0 = rf(id, imagePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID, string) error); ok {
		r1 = rf(id, imagePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReview provides a mock function with given fields: productHexId, userId, rating, comment
func (_m *ProductsRepository) CreateReview(productHexId string, userId string, rating int, comment string) (*models.Review, error) {
	ret := _m.Called(productHexId, userId, rating, comment)

	var r0 *models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, string) (*models.Review, error)); ok {
		return rf(productHexId, userId, rating, comment)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, string) *models.Review); ok {
		r0 = rf(productHexId, userId, rating, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, string) error); ok {
		r1 = rf(productHexId, userId, rating, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImage provides a mock function with given fields: id, imageId
func (_m *ProductsRepository) DeleteImage(id primitive.ObjectID, imageId string) (bool, error) {
	ret := _m.Called(id, imageId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) (bool, error)); ok {
		return rf(id, imageId)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) bool); ok {
		r0 = rf(id, imageId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID, string) error); ok {
		r1 = rf(id, imageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: id
func (_m *ProductsRepository) DeleteProduct(id primitive.ObjectID) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: id
func (_m *ProductsRepository) GetProduct(id primitive.ObjectID) (*models.Product, error) {
	ret := _m.Called(id)

	var r0 *models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*models.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *models.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProduct provides a mock function with given fields: product
func (_m *ProductsRepository) InsertProduct(product models.Product) (*models.Product, error) {
	ret := _m.Called(product)

	var r0 *models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Product) (*models.Product, error)); ok {
		return rf(product)
	}
	if rf, ok := ret.Get(0).(func(models.Product) *models.Product); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields:
func (_m *ProductsRepository) ListProducts() ([]models.Product, error) {
	ret := _m.Called()

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProducts provides a mock function with given fields: query
func (_m *ProductsRepository) SearchProducts(query string) ([]models.Product, error) {
	ret := _m.Called(query)

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Product, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Product); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: product
func (_m *ProductsRepository) UpdateProduct(product models.Product) (bool, error) {
	ret := _m.Called(product)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Product) (bool, error)); ok {
		return rf(product)
	}
	if rf, ok := ret.Get(0).(func(models.Product) bool); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(models.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductsRepository creates a new instance of ProductsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductsRepository {
	mock := &ProductsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
