// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	models "github.com/manoamaro/microservices-store/auth_service/models"
	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: email, plainPassword
func (_m *AuthRepository) Authenticate(email string, plainPassword string) (*models.Auth, bool) {
	ret := _m.Called(email, plainPassword)

	var r0 *models.Auth
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, string) (*models.Auth, bool)); ok {
		return rf(email, plainPassword)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Auth); ok {
		r0 = rf(email, plainPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(email, plainPassword)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Create provides a mock function with given fields: email, plainPassword, audience, flags
func (_m *AuthRepository) Create(email string, plainPassword string, audience []string, flags []string) (*models.Auth, error) {
	ret := _m.Called(email, plainPassword, audience, flags)

	var r0 *models.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string, []string) (*models.Auth, error)); ok {
		return rf(email, plainPassword, audience, flags)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string, []string) *models.Auth); ok {
		r0 = rf(email, plainPassword, audience, flags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string, []string) error); ok {
		r1 = rf(email, plainPassword, audience, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *AuthRepository) Get(id uint) (models.Auth, error) {
	ret := _m.Called(id)

	var r0 models.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Auth, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Auth); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Auth)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateToken provides a mock function with given fields: token, rawToken
func (_m *AuthRepository) InvalidateToken(token *models.UserClaims, rawToken string) error {
	ret := _m.Called(token, rawToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UserClaims, string) error); ok {
		r0 = rf(token, rawToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsInvalidatedToken provides a mock function with given fields: rawToken
func (_m *AuthRepository) IsInvalidatedToken(rawToken string) bool {
	ret := _m.Called(rawToken)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(rawToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
